service: garduino-controller-configuration

frameworkVersion: "3"

useDotenv: true

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-west-1
  architecture: arm64
  memorySize: 256

  httpApi:
    cors: true

    authorizers:
      cognitoJwtAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.${aws:region}.amazonaws.com/${env:AWS_COGNITO_POOL_ID}
        audience:
          - ${env:AWS_COGNITO_CLIENT_ID}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:Query 
          Resource: "arn:aws:dynamodb:${aws:region}:*:*"
        - Effect: Allow
          Action:
            - iot:AttachPolicy	
            - iot:AttachThingPrincipal
            - iot:CreateThing
            - iot:CreatePolicy
            - iot:CreateKeysAndCertificate
          Resource: "*"


plugins:
  - serverless-offline
  - serverless-webpack

custom:
  webpack:
    webpackConfig: "../../../webpack.config.js"

resources:
  Resources:
    configurations:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: configurations
        AttributeDefinitions:
          - AttributeName: controllerId
            AttributeType: S
          - AttributeName: ownerId
            AttributeType: S
        KeySchema:
          - AttributeName: controllerId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

        GlobalSecondaryIndexes:
          - IndexName: ownerIdIndex
            KeySchema:
              - AttributeName: ownerId
                KeyType: HASH
              - AttributeName: controllerId
                KeyType: RANGE

            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

  Outputs:
    url:
      Value:
        Fn::Join: [ "", [ "https://", { "Ref": "HttpApi" }, ".execute-api.${aws:region}.amazonaws.com"] ]

functions:
  list:
    name: getConfigurations
    handler: index.getConfigurations
    events:
      - httpApi:
          path: /configuration
          method: GET
          authorizer:
            name: cognitoJwtAuthorizer

  get:
    name: getConfiguration
    handler: index.getConfiguration
    events:
      - httpApi:
          path: /configuration/{controllerId}
          method: GET

  create:
    name: createConfiguration
    handler: index.createConfiguration
    events:
      - httpApi:
          path: /configuration
          method: POST
          authorizer:
            name: cognitoJwtAuthorizer
    environment:
      AWS_COGNITO_POOL_ID: ${env:AWS_COGNITO_POOL_ID}
      AWS_COGNITO_CLIENT_ID: ${env:AWS_COGNITO_CLIENT_ID}

  update:
    name: setConfiguration
    handler: index.setConfiguration
    events:
      - httpApi:
          path: /configuration/{controllerId}
          method: PUT
          authorizer:
            name: cognitoJwtAuthorizer

  removeConfiguration:
    name: removeConfiguration
    handler: index.removeConfiguration
    events:
      - httpApi:
          path: /configuration/{controllerId}
          method: DELETE
          authorizer:
            name: cognitoJwtAuthorizer
